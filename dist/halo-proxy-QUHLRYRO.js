import{P as g,E as I,a as _,M as S,e as C,i as m,D as P,b as o,l as y,t as b,I as f,c as w,R as d,A as v,T as x,d as F,f as K,g as p,__tla as L}from"./index.js";let h,k=Promise.all([(()=>{try{return L}catch{}})()]).then(async()=>{function u(i,e,r,t){var s=arguments.length,n=s<3?e:t===null?t=Object.getOwnPropertyDescriptor(e,r):t,c;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")n=Reflect.decorate(i,e,r,t);else for(var l=i.length-1;l>=0;l--)(c=i[l])&&(n=(s<3?c(n):s>3?c(e,r,n):c(e,r))||n);return s>3&&n&&Object.defineProperty(e,r,n),n}let a;a="/home/runner/work/dxos/dxos/packages/sdk/client/src/halo/halo-proxy.ts",h=class{constructor(i,e){this._serviceProvider=i,this._traceParent=e,this._instanceId=g.random().toHex(),this._subscriptions=new I,this._identityChanged=new _,this._devicesChanged=new _,this._contactsChanged=new _,this._credentialsChanged=new _,this._identity=S.from(this._identityChanged,null),this._devices=S.from(this._devicesChanged,[]),this._contacts=S.from(this._contactsChanged,[]),this._credentials=S.from(this._credentialsChanged,[])}[C.custom](){return m(this)}toJSON(){var i,e;return{identityKey:(i=this._identity.get())==null?void 0:i.identityKey.truncate(),deviceKey:(e=this.device)==null?void 0:e.deviceKey.truncate()}}get identity(){return this._identity}get devices(){return this._devices}get device(){return this._devices.get().find(i=>i.kind===P.CURRENT)}get contacts(){return this._contacts}get credentials(){return this._credentials}get invitations(){return o(this._invitationProxy,"HaloProxy not opened",{F:a,L:95,S:this,A:["this._invitationProxy","'HaloProxy not opened'"]}),this._invitationProxy.created}get opened(){return this._invitationProxy!==void 0}async _open(){y.trace("dxos.sdk.halo-proxy.open",b.begin({id:this._instanceId,parentId:this._traceParent}),{F:a,L:111,S:this,C:(t,s)=>t(...s)});const i=this._identityChanged.waitForCount(1);o(this._serviceProvider.services.InvitationsService,"InvitationsService not available",{F:a,L:115,S:this,A:["this._serviceProvider.services.InvitationsService","'InvitationsService not available'"]}),this._invitationProxy=new f(this._serviceProvider.services.InvitationsService,this._serviceProvider.services.IdentityService,()=>({kind:w.Kind.DEVICE})),await this._invitationProxy.open(),this._identityChanged.on(t=>{t&&!this._haloCredentialStream&&(o(this._serviceProvider.services.SpacesService,"SpacesService not available",{F:a,L:127,S:this,A:["this._serviceProvider.services.SpacesService","'SpacesService not available'"]}),this._haloCredentialStream=this._serviceProvider.services.SpacesService.queryCredentials({spaceKey:t.spaceKey},{timeout:d}),this._haloCredentialStream.subscribe(s=>{this._credentialsChanged.emit([...this._credentials.get(),s])}),this._subscriptions.add(()=>{var s;return(s=this._haloCredentialStream)==null?void 0:s.close()}))}),o(this._serviceProvider.services.IdentityService,"IdentityService not available",{F:a,L:141,S:this,A:["this._serviceProvider.services.IdentityService","'IdentityService not available'"]});const e=this._serviceProvider.services.IdentityService.queryIdentity(void 0,{timeout:d});e.subscribe(t=>{var s;t.identity&&y.trace("dxos.halo.identity",{identityKey:t.identity.identityKey,displayName:(s=t.identity.profile)==null?void 0:s.displayName},{F:a,L:148,S:this,C:(n,c)=>n(...c)}),this._identityChanged.emit(t.identity??null)}),this._subscriptions.add(()=>e.close()),o(this._serviceProvider.services.DevicesService,"DevicesService not available",{F:a,L:156,S:this,A:["this._serviceProvider.services.DevicesService","'DevicesService not available'"]});const r=this._serviceProvider.services.DevicesService.queryDevices(void 0,{timeout:d});r.subscribe(t=>{if(t.devices){this._devicesChanged.emit(t.devices);const s=t.devices.find(n=>n.kind===P.CURRENT);y.trace("dxos.halo.device",{deviceKey:s==null?void 0:s.deviceKey,profile:s==null?void 0:s.profile},{F:a,L:164,S:this,C:(n,c)=>n(...c)})}}),this._subscriptions.add(()=>r.close()),y.trace("dxos.sdk.halo-proxy.open",b.end({id:this._instanceId}),{F:a,L:180,S:this,C:(t,s)=>t(...s)}),await Promise.all([i])}async _close(){var i;await((i=this._invitationProxy)==null?void 0:i.close()),this._invitationProxy=void 0,this._subscriptions.clear(),this._identityChanged.emit(null),this._devicesChanged.emit([]),this._contactsChanged.emit([])}_waitForIdentity(){return this._identityChanged.waitForCondition(()=>!!this._identity.get())}async createIdentity(i={},e){o(this._serviceProvider.services.IdentityService,"IdentityService not available",{F:a,L:213,S:this,A:["this._serviceProvider.services.IdentityService","'IdentityService not available'"]});const r={...e,...e!=null&&e.label?{label:e.label}:{label:"initial identity device"}},t=await this._serviceProvider.services.IdentityService.createIdentity({profile:i,deviceProfile:r},{timeout:d});return this._identityChanged.emit(t),t}async recoverIdentity(i){o(this._serviceProvider.services.IdentityService,"IdentityService not available",{F:a,L:230,S:this,A:["this._serviceProvider.services.IdentityService","'IdentityService not available'"]});const e=await this._serviceProvider.services.IdentityService.recoverIdentity({recoveryKey:i},{timeout:d});return this._identityChanged.emit(e),e}async updateProfile(i){o(this._serviceProvider.services.IdentityService,"IdentityService not available",{F:a,L:240,S:this,A:["this._serviceProvider.services.IdentityService","'IdentityService not available'"]});const e=await this._serviceProvider.services.IdentityService.updateProfile(i,{timeout:d});return this._identityChanged.emit(e),e}queryCredentials({ids:i,type:e}={}){return this._credentials.get().filter(r=>!(i&&!i.some(t=>t.equals(r.id))||e&&r.subject.assertion["@type"]!==e))}share(i){if(!this.opened)throw new v("Client not open.");return y("create invitation",{options:i},{F:a,L:272,S:this,C:(e,r)=>e(...r)}),this._invitationProxy.share(i)}join(i,e){if(!this.opened)throw new v("Client not open.");const r={...e,...e!=null&&e.label?{label:e.label}:{label:"additional device"}};return this._invitationProxy.join(i,r)}async writeCredentials(i){const e=this._identity.get();if(!e)throw new v("Identity is not available.");if(!this._serviceProvider.services.SpacesService)throw new v("SpacesService is not available.");return this._serviceProvider.services.SpacesService.writeCredentials({spaceKey:e.spaceKey,credentials:i},{timeout:d})}async presentCredentials({ids:i,nonce:e}){if(!this._serviceProvider.services.IdentityService)throw new v("IdentityService is not available.");const r=new x;this._credentials.subscribe(s=>{const n=s.filter(c=>i.some(l=>l.equals(c.id)));n.length===i.length&&r.wake(n)});const t=await F(r.wait(),K,new v("Timeout while waiting for credentials"));return this._serviceProvider.services.IdentityService.signPresentation({presentation:{credentials:t},nonce:e},{timeout:d})}},u([p.info({depth:null})],h.prototype,"toJSON",null),u([p.info()],h.prototype,"opened",null),h=u([p.resource()],h)});export{h as HaloProxy,k as __tla};
