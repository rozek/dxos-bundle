{"version":3,"file":"halo-proxy-QUHLRYRO.js","sources":["../node_modules/@dxos/client/dist/lib/browser/halo-proxy-QUHLRYRO.mjs"],"sourcesContent":["import {\n  InvitationsProxy\n} from \"./chunk-JITRD7EO.mjs\";\nimport {\n  RPC_TIMEOUT\n} from \"./chunk-UFEX2AOY.mjs\";\n\n// packages/sdk/client/src/halo/halo-proxy.ts\nimport { inspect } from \"@dxos/node-std/util\";\nimport { asyncTimeout, Event, EventSubscriptions, MulticastObservable, Trigger } from \"@dxos/async\";\nimport { AUTH_TIMEOUT } from \"@dxos/client-protocol\";\nimport { inspectObject } from \"@dxos/debug\";\nimport { invariant } from \"@dxos/invariant\";\nimport { PublicKey } from \"@dxos/keys\";\nimport { log } from \"@dxos/log\";\nimport { ApiError, trace as Trace } from \"@dxos/protocols\";\nimport { DeviceKind, Invitation } from \"@dxos/protocols/proto/dxos/client/services\";\nimport { trace } from \"@dxos/tracing\";\nfunction _ts_decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nvar __dxlog_file = \"/home/runner/work/dxos/dxos/packages/sdk/client/src/halo/halo-proxy.ts\";\nvar HaloProxy = class {\n  constructor(_serviceProvider, _traceParent) {\n    this._serviceProvider = _serviceProvider;\n    this._traceParent = _traceParent;\n    this._instanceId = PublicKey.random().toHex();\n    this._subscriptions = new EventSubscriptions();\n    this._identityChanged = new Event();\n    this._devicesChanged = new Event();\n    this._contactsChanged = new Event();\n    this._credentialsChanged = new Event();\n    this._identity = MulticastObservable.from(this._identityChanged, null);\n    this._devices = MulticastObservable.from(this._devicesChanged, []);\n    this._contacts = MulticastObservable.from(this._contactsChanged, []);\n    this._credentials = MulticastObservable.from(this._credentialsChanged, []);\n  }\n  [inspect.custom]() {\n    return inspectObject(this);\n  }\n  toJSON() {\n    return {\n      identityKey: this._identity.get()?.identityKey.truncate(),\n      deviceKey: this.device?.deviceKey.truncate()\n    };\n  }\n  /**\n  * User identity info.\n  */\n  get identity() {\n    return this._identity;\n  }\n  get devices() {\n    return this._devices;\n  }\n  get device() {\n    return this._devices.get().find((device) => device.kind === DeviceKind.CURRENT);\n  }\n  get contacts() {\n    return this._contacts;\n  }\n  get credentials() {\n    return this._credentials;\n  }\n  get invitations() {\n    invariant(this._invitationProxy, \"HaloProxy not opened\", {\n      F: __dxlog_file,\n      L: 95,\n      S: this,\n      A: [\n        \"this._invitationProxy\",\n        \"'HaloProxy not opened'\"\n      ]\n    });\n    return this._invitationProxy.created;\n  }\n  // TODO(burdon): Standardize isOpen, etc.\n  get opened() {\n    return this._invitationProxy !== void 0;\n  }\n  /**\n  * Allocate resources and set-up internal subscriptions.\n  *\n  * @internal\n  */\n  async _open() {\n    log.trace(\"dxos.sdk.halo-proxy.open\", Trace.begin({\n      id: this._instanceId,\n      parentId: this._traceParent\n    }), {\n      F: __dxlog_file,\n      L: 111,\n      S: this,\n      C: (f, a) => f(...a)\n    });\n    const gotIdentity = this._identityChanged.waitForCount(1);\n    invariant(this._serviceProvider.services.InvitationsService, \"InvitationsService not available\", {\n      F: __dxlog_file,\n      L: 115,\n      S: this,\n      A: [\n        \"this._serviceProvider.services.InvitationsService\",\n        \"'InvitationsService not available'\"\n      ]\n    });\n    this._invitationProxy = new InvitationsProxy(this._serviceProvider.services.InvitationsService, this._serviceProvider.services.IdentityService, () => ({\n      kind: Invitation.Kind.DEVICE\n    }));\n    await this._invitationProxy.open();\n    this._identityChanged.on((identity) => {\n      if (identity && !this._haloCredentialStream) {\n        invariant(this._serviceProvider.services.SpacesService, \"SpacesService not available\", {\n          F: __dxlog_file,\n          L: 127,\n          S: this,\n          A: [\n            \"this._serviceProvider.services.SpacesService\",\n            \"'SpacesService not available'\"\n          ]\n        });\n        this._haloCredentialStream = this._serviceProvider.services.SpacesService.queryCredentials({\n          spaceKey: identity.spaceKey\n        }, {\n          timeout: RPC_TIMEOUT\n        });\n        this._haloCredentialStream.subscribe((data) => {\n          this._credentialsChanged.emit([\n            ...this._credentials.get(),\n            data\n          ]);\n        });\n        this._subscriptions.add(() => this._haloCredentialStream?.close());\n      }\n    });\n    invariant(this._serviceProvider.services.IdentityService, \"IdentityService not available\", {\n      F: __dxlog_file,\n      L: 141,\n      S: this,\n      A: [\n        \"this._serviceProvider.services.IdentityService\",\n        \"'IdentityService not available'\"\n      ]\n    });\n    const identityStream = this._serviceProvider.services.IdentityService.queryIdentity(void 0, {\n      timeout: RPC_TIMEOUT\n    });\n    identityStream.subscribe((data) => {\n      data.identity && log.trace(\"dxos.halo.identity\", {\n        identityKey: data.identity.identityKey,\n        displayName: data.identity.profile?.displayName\n      }, {\n        F: __dxlog_file,\n        L: 148,\n        S: this,\n        C: (f, a) => f(...a)\n      });\n      this._identityChanged.emit(data.identity ?? null);\n    });\n    this._subscriptions.add(() => identityStream.close());\n    invariant(this._serviceProvider.services.DevicesService, \"DevicesService not available\", {\n      F: __dxlog_file,\n      L: 156,\n      S: this,\n      A: [\n        \"this._serviceProvider.services.DevicesService\",\n        \"'DevicesService not available'\"\n      ]\n    });\n    const devicesStream = this._serviceProvider.services.DevicesService.queryDevices(void 0, {\n      timeout: RPC_TIMEOUT\n    });\n    devicesStream.subscribe((data) => {\n      if (data.devices) {\n        this._devicesChanged.emit(data.devices);\n        const current = data.devices.find((device) => device.kind === DeviceKind.CURRENT);\n        log.trace(\"dxos.halo.device\", {\n          deviceKey: current?.deviceKey,\n          profile: current?.profile\n        }, {\n          F: __dxlog_file,\n          L: 164,\n          S: this,\n          C: (f, a) => f(...a)\n        });\n      }\n    });\n    this._subscriptions.add(() => devicesStream.close());\n    log.trace(\"dxos.sdk.halo-proxy.open\", Trace.end({\n      id: this._instanceId\n    }), {\n      F: __dxlog_file,\n      L: 180,\n      S: this,\n      C: (f, a) => f(...a)\n    });\n    await Promise.all([\n      gotIdentity\n    ]);\n  }\n  /**\n  * Destroy the instance and clean-up subscriptions.\n  *\n  * @internal\n  */\n  async _close() {\n    await this._invitationProxy?.close();\n    this._invitationProxy = void 0;\n    this._subscriptions.clear();\n    this._identityChanged.emit(null);\n    this._devicesChanged.emit([]);\n    this._contactsChanged.emit([]);\n  }\n  /**\n  * @internal\n  */\n  // TODO(wittjosiah): Should `Observable` class support this?\n  _waitForIdentity() {\n    return this._identityChanged.waitForCondition(() => !!this._identity.get());\n  }\n  /**\n  * Create Identity.\n  * Then initializes profile with given display name.\n  * @param profile - optional display name\n  * @param deviceProfile - optional device profile that will be merged with defaults\n  */\n  async createIdentity(profile = {}, deviceProfile) {\n    invariant(this._serviceProvider.services.IdentityService, \"IdentityService not available\", {\n      F: __dxlog_file,\n      L: 213,\n      S: this,\n      A: [\n        \"this._serviceProvider.services.IdentityService\",\n        \"'IdentityService not available'\"\n      ]\n    });\n    const deviceProfileWithDefaults = {\n      ...deviceProfile,\n      ...deviceProfile?.label ? {\n        label: deviceProfile.label\n      } : {\n        label: \"initial identity device\"\n      }\n    };\n    const identity = await this._serviceProvider.services.IdentityService.createIdentity({\n      profile,\n      deviceProfile: deviceProfileWithDefaults\n    }, {\n      timeout: RPC_TIMEOUT\n    });\n    this._identityChanged.emit(identity);\n    return identity;\n  }\n  async recoverIdentity(recoveryKey) {\n    invariant(this._serviceProvider.services.IdentityService, \"IdentityService not available\", {\n      F: __dxlog_file,\n      L: 230,\n      S: this,\n      A: [\n        \"this._serviceProvider.services.IdentityService\",\n        \"'IdentityService not available'\"\n      ]\n    });\n    const identity = await this._serviceProvider.services.IdentityService.recoverIdentity({\n      recoveryKey\n    }, {\n      timeout: RPC_TIMEOUT\n    });\n    this._identityChanged.emit(identity);\n    return identity;\n  }\n  async updateProfile(profile) {\n    invariant(this._serviceProvider.services.IdentityService, \"IdentityService not available\", {\n      F: __dxlog_file,\n      L: 240,\n      S: this,\n      A: [\n        \"this._serviceProvider.services.IdentityService\",\n        \"'IdentityService not available'\"\n      ]\n    });\n    const identity = await this._serviceProvider.services.IdentityService.updateProfile(profile, {\n      timeout: RPC_TIMEOUT\n    });\n    this._identityChanged.emit(identity);\n    return identity;\n  }\n  /**\n  * Get Halo credentials for the current user.\n  * Note: Will return an empty result if called before all credentials have been loaded.\n  */\n  queryCredentials({ ids, type } = {}) {\n    return this._credentials.get().filter((credential) => {\n      if (ids && !ids.some((id) => id.equals(credential.id))) {\n        return false;\n      }\n      if (type && credential.subject.assertion[\"@type\"] !== type) {\n        return false;\n      }\n      return true;\n    });\n  }\n  /**\n  * Initiates device invitation.\n  */\n  share(options) {\n    if (!this.opened) {\n      throw new ApiError(\"Client not open.\");\n    }\n    log(\"create invitation\", {\n      options\n    }, {\n      F: __dxlog_file,\n      L: 272,\n      S: this,\n      C: (f, a) => f(...a)\n    });\n    const invitation = this._invitationProxy.share(options);\n    return invitation;\n  }\n  /**\n  * Initiates accepting invitation.\n  * @param invitation\n  * @param deviceProfile - optional device profile that will be merged with defaults\n  */\n  join(invitation, deviceProfile) {\n    if (!this.opened) {\n      throw new ApiError(\"Client not open.\");\n    }\n    const deviceProfileWithDefaults = {\n      ...deviceProfile,\n      ...deviceProfile?.label ? {\n        label: deviceProfile.label\n      } : {\n        label: \"additional device\"\n      }\n    };\n    return this._invitationProxy.join(invitation, deviceProfileWithDefaults);\n  }\n  /**\n  * Write credentials to halo profile.\n  */\n  async writeCredentials(credentials) {\n    const identity = this._identity.get();\n    if (!identity) {\n      throw new ApiError(\"Identity is not available.\");\n    }\n    if (!this._serviceProvider.services.SpacesService) {\n      throw new ApiError(\"SpacesService is not available.\");\n    }\n    return this._serviceProvider.services.SpacesService.writeCredentials({\n      spaceKey: identity.spaceKey,\n      credentials\n    }, {\n      timeout: RPC_TIMEOUT\n    });\n  }\n  /**\n  * Present Credentials.\n  */\n  async presentCredentials({ ids, nonce }) {\n    if (!this._serviceProvider.services.IdentityService) {\n      throw new ApiError(\"IdentityService is not available.\");\n    }\n    const trigger = new Trigger();\n    this._credentials.subscribe((credentials2) => {\n      const credentialsToPresent = credentials2.filter((credential) => ids.some((id) => id.equals(credential.id)));\n      if (credentialsToPresent.length === ids.length) {\n        trigger.wake(credentialsToPresent);\n      }\n    });\n    const credentials = await asyncTimeout(trigger.wait(), AUTH_TIMEOUT, new ApiError(\"Timeout while waiting for credentials\"));\n    return this._serviceProvider.services.IdentityService.signPresentation({\n      presentation: {\n        credentials\n      },\n      nonce\n    }, {\n      timeout: RPC_TIMEOUT\n    });\n  }\n};\n_ts_decorate([\n  trace.info({\n    depth: null\n  })\n], HaloProxy.prototype, \"toJSON\", null);\n_ts_decorate([\n  trace.info()\n], HaloProxy.prototype, \"opened\", null);\nHaloProxy = _ts_decorate([\n  trace.resource()\n], HaloProxy);\nexport {\n  HaloProxy\n};\n//# sourceMappingURL=halo-proxy-QUHLRYRO.mjs.map\n"],"names":["_ts_decorate","decorators","target","key","desc","c","r","d","i","__dxlog_file","HaloProxy","_serviceProvider","_traceParent","PublicKey","EventSubscriptions","Event","MulticastObservable","inspect","inspectObject","device","DeviceKind","invariant","log","Trace","f","a","gotIdentity","InvitationsProxy","Invitation","identity","RPC_TIMEOUT","data","identityStream","devicesStream","current","profile","deviceProfile","deviceProfileWithDefaults","recoveryKey","ids","type","credential","id","options","ApiError","invitation","credentials","nonce","trigger","Trigger","credentials2","credentialsToPresent","asyncTimeout","AUTH_TIMEOUT","trace"],"mappings":"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","x_google_ignoreList":[0]}