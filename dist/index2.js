import{l,P as m,j as p,k as D,m as A,n as E,__tla as b}from"./index.js";let h,C,x=Promise.all([(()=>{try{return b}catch{}})()]).then(async()=>{(function(o){o[o.UNKNOWN=0]="UNKNOWN",o[o.IDENTITY=1]="IDENTITY",o[o.DEVICE=2]="DEVICE",o[o.SPACE=3]="SPACE",o[o.FEED=4]="FEED",o[o.DXNS_ADDRESS=5]="DXNS_ADDRESS"})(h||(h={}));let c,y,w,S;c="/home/runner/work/dxos/dxos/packages/sdk/client/src/devtools/devtools.ts",C=({client:o,host:n})=>{let i,a=[];const s={client:o,host:n,tracing:p,openClientRpcServer:async()=>o?(i&&(l("Closing existing client RPC server.",void 0,{F:c,L:79,S:void 0,C:(e,t)=>e(...t)}),await i.close()),l("Opening devtools client RPC server...",void 0,{F:c,L:83,S:void 0,C:(e,t)=>e(...t)}),i=D({services:o.services.descriptors,handlers:o.services.services,port:w}),await i.open().catch(e=>(l.error(`Failed to open RPC server: ${e}`,void 0,{F:c,L:91,S:void 0,C:(t,r)=>t(...r)}),!1)),l("Opened devtools client RPC server.",void 0,{F:c,L:95,S:void 0,C:(e,t)=>e(...t)}),!0):(l.error("Client not available",void 0,{F:c,L:74,S:void 0,C:(e,t)=>e(...t)}),!1),reset:S,importModule:A,listDiagnostics:async()=>{a=await p.diagnosticsChannel.discover(),console.table(a.map(e=>({...e,get fetch(){queueMicrotask(async()=>{const{data:t,error:r}=await p.diagnosticsChannel.fetch(e);if(r){l.error(`Error fetching diagnostic ${e.id}: ${r}`,void 0,{F:c,L:114,S:this,C:(u,f)=>u(...f)});return}console.table(t)})}})))},fetchDiagnostics:async(e,t)=>{a.length===0&&(a=await p.diagnosticsChannel.discover());let r=a.find(d=>d.id===e&&(t?d.instanceTag===t:!0));if(r||(a=await p.diagnosticsChannel.discover()),r=a.find(d=>d.id===e&&(t?d.instanceTag===t:!0)),!r){l.error(`Diagnostic ${e} not found.`,void 0,{F:c,L:140,S:void 0,C:(d,v)=>d(...v)});return}const{data:u,error:f}=await p.diagnosticsChannel.fetch(r);if(f){l.error(`Error fetching diagnostic ${e}: ${f}`,void 0,{F:c,L:146,S:void 0,C:(d,v)=>d(...v)});return}return u},joinTables:E};o&&(s.spaces=y({getAll:()=>o.spaces.get(),getByKey:e=>o.spaces.get().find(t=>t.key.equals(e)),getSearchMap:()=>new Map(o.spaces.get().flatMap(e=>[[e.key.toHex(),e],[e.properties.name,e]]))}),s.halo=o.halo,s.openDevtoolsApp=async()=>{var f,d,v;const e=((v=(d=(f=o.config)==null?void 0:f.values.runtime)==null?void 0:d.client)==null?void 0:v.remoteSource)??"https://halo.dxos.org";let t=!1;try{await fetch("http://localhost:5174/"),t=!0}catch{}const r=window.location.href.includes(".dev.")||window.location.href.includes("localhost"),u=`${t?"http://localhost:5174/":`https://devtools${r?".dev.":"."}dxos.org/`}?target=${e}`;window.open(u,"_blank")},s.downloadDiagnostics=async()=>{const e=JSON.stringify(await o.diagnostics(),null,4),t=URL.createObjectURL(new Blob([e],{type:"application/json"})),r=document.createElement("a");r.setAttribute("href",t),r.setAttribute("download",`diagnostics-${window.location.hostname}-${new Date().toISOString()}.json`),r.setAttribute("target","download"),r.click()}),n&&(s.spaces=y({getAll:()=>{var e;return Array.from(((e=n.context.dataSpaceManager)==null?void 0:e.spaces.values())??[])},getByKey:e=>{var t;return(t=n.context.dataSpaceManager)==null?void 0:t.spaces.get(e)},getSearchMap:()=>{var e;return new Map(Array.from(((e=n.context.dataSpaceManager)==null?void 0:e.spaces.values())??[]).flatMap(t=>[[t.key.toHex(),t]]))}}),s.feeds=y({getAll:()=>{var e;return Array.from(((e=n.context.feedStore)==null?void 0:e.feeds.values())??[])},getByKey:e=>{var t;return(t=n.context.feedStore)==null?void 0:t.feeds.find(r=>r.key.equals(e))},getSearchMap:()=>{var e;return new Map(Array.from(((e=n.context.feedStore)==null?void 0:e.feeds.values())??[]).flatMap(t=>[[t.key.toHex(),t]]))}})),globalThis.__DXOS__=s;let g=!1;Object.defineProperty(globalThis,"dxos",{get:()=>(g||(g=!0,l.warn("globalThis.dxos is an undocumented API and may changed or removed entirely without notice.",void 0,{F:c,L:225,S:void 0,C:(e,t)=>e(...t)})),s),configurable:!0})},y=({getByKey:o,getSearchMap:n,getAll:i})=>a=>{if(typeof a>"u")return(i==null?void 0:i())??[];if(a instanceof m)return o==null?void 0:o(a);const s=(n==null?void 0:n())??new Map;if(s.has(a))return s.get(a);for(const[g,e]of s.entries())if(g.startsWith(a))return e;for(const[g,e]of s.entries())if(g.includes(a))return e},w={send:async o=>window.postMessage({data:Array.from(o),source:"dxos-client"},"*"),subscribe:o=>{const n=i=>{if(i.source!==window)return;const a=i.data;typeof a!="object"||a===null||a.source!=="content-script"||o(new Uint8Array(a.data))};return window.addEventListener("message",n),()=>window.removeEventListener("message",n)}},S=async()=>{var o;if(l.info(`Deleting all data from ${typeof window.localStorage<"u"?(o=window.location)==null?void 0:o.origin:""}`,void 0,{F:c,L:308,S:void 0,C:(n,i)=>n(...i)}),typeof localStorage<"u"&&(localStorage.clear(),l.info("Cleared local storage",void 0,{F:c,L:312,S:void 0,C:(n,i)=>n(...i)})),typeof navigator<"u"&&typeof navigator.storage<"u"&&typeof navigator.storage.getDirectory=="function"){const n=await navigator.storage.getDirectory();for await(const i of n.keys())try{await n.removeEntry(i,{recursive:!0})}catch(a){l.error(`Failed to delete ${i}: ${a}`,void 0,{F:c,L:325,S:void 0,C:(s,g)=>s(...g)})}l.info("Cleared OPFS",void 0,{F:c,L:328,S:void 0,C:(i,a)=>i(...a)}),typeof location<"u"&&typeof location.reload=="function"?location.reload():typeof close=="function"&&close()}}});export{h as KeyType,x as __tla,C as mountDevtoolsHooks};
