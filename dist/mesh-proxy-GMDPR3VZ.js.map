{"version":3,"file":"mesh-proxy-GMDPR3VZ.js","sources":["../node_modules/@dxos/client/dist/lib/browser/mesh-proxy-GMDPR3VZ.mjs"],"sourcesContent":["import {\n  RPC_TIMEOUT\n} from \"./chunk-UFEX2AOY.mjs\";\n\n// packages/sdk/client/src/mesh/mesh-proxy.ts\nimport { Event, MulticastObservable } from \"@dxos/async\";\nimport { Context } from \"@dxos/context\";\nimport { invariant } from \"@dxos/invariant\";\nimport { PublicKey } from \"@dxos/keys\";\nimport { log } from \"@dxos/log\";\nimport { trace } from \"@dxos/protocols\";\nimport { ConnectionState } from \"@dxos/protocols/proto/dxos/client/services\";\nvar __dxlog_file = \"/home/runner/work/dxos/dxos/packages/sdk/client/src/mesh/mesh-proxy.ts\";\nvar MeshProxy = class {\n  constructor(_serviceProvider, _traceParent) {\n    this._serviceProvider = _serviceProvider;\n    this._traceParent = _traceParent;\n    this._networkStatusUpdated = new Event();\n    this._networkStatus = MulticastObservable.from(this._networkStatusUpdated, {\n      swarm: ConnectionState.OFFLINE,\n      signaling: []\n    });\n    this._instanceId = PublicKey.random().toHex();\n  }\n  toJSON() {\n    return {\n      networkStatus: this._networkStatus.get()\n    };\n  }\n  get networkStatus() {\n    return this._networkStatus;\n  }\n  async updateConfig(swarm) {\n    invariant(this._serviceProvider.services.NetworkService, \"NetworkService is not available.\", {\n      F: __dxlog_file,\n      L: 49,\n      S: this,\n      A: [\n        \"this._serviceProvider.services.NetworkService\",\n        \"'NetworkService is not available.'\"\n      ]\n    });\n    return this._serviceProvider.services.NetworkService.updateConfig({\n      swarm\n    }, {\n      timeout: RPC_TIMEOUT\n    });\n  }\n  /**\n  * @internal\n  */\n  async _open() {\n    log.trace(\"dxos.sdk.mesh-proxy.open\", trace.begin({\n      id: this._instanceId,\n      parentId: this._traceParent\n    }), {\n      F: __dxlog_file,\n      L: 57,\n      S: this,\n      C: (f, a) => f(...a)\n    });\n    this._ctx = new Context({\n      onError: (err) => log.catch(err, void 0, {\n        F: __dxlog_file,\n        L: 58,\n        S: this,\n        C: (f, a) => f(...a)\n      })\n    });\n    invariant(this._serviceProvider.services.NetworkService, \"NetworkService is not available.\", {\n      F: __dxlog_file,\n      L: 60,\n      S: this,\n      A: [\n        \"this._serviceProvider.services.NetworkService\",\n        \"'NetworkService is not available.'\"\n      ]\n    });\n    const networkStatusStream = this._serviceProvider.services.NetworkService.queryStatus(void 0, {\n      timeout: RPC_TIMEOUT\n    });\n    networkStatusStream.subscribe((networkStatus) => {\n      this._networkStatusUpdated.emit(networkStatus);\n    });\n    this._ctx.onDispose(() => networkStatusStream.close());\n    log.trace(\"dxos.sdk.mesh-proxy.open\", trace.end({\n      id: this._instanceId\n    }), {\n      F: __dxlog_file,\n      L: 69,\n      S: this,\n      C: (f, a) => f(...a)\n    });\n  }\n  /**\n  * @internal\n  */\n  async _close() {\n    await this._ctx?.dispose();\n  }\n};\nexport {\n  MeshProxy\n};\n//# sourceMappingURL=mesh-proxy-GMDPR3VZ.mjs.map\n"],"names":["__dxlog_file","MeshProxy","_serviceProvider","_traceParent","Event","MulticastObservable","ConnectionState","PublicKey","swarm","invariant","RPC_TIMEOUT","log","trace","f","a","Context","err","networkStatusStream","networkStatus"],"mappings":"uFAYA,IAAIA,EAAe,yEACfC,EAAY,KAAM,CACpB,YAAYC,EAAkBC,EAAc,CAC1C,KAAK,iBAAmBD,EACxB,KAAK,aAAeC,EACpB,KAAK,sBAAwB,IAAIC,EACjC,KAAK,eAAiBC,EAAoB,KAAK,KAAK,sBAAuB,CACzE,MAAOC,EAAgB,QACvB,UAAW,CAAE,CACnB,CAAK,EACD,KAAK,YAAcC,EAAU,OAAQ,EAAC,MAAK,CAC5C,CACD,QAAS,CACP,MAAO,CACL,cAAe,KAAK,eAAe,IAAK,CAC9C,CACG,CACD,IAAI,eAAgB,CAClB,OAAO,KAAK,cACb,CACD,MAAM,aAAaC,EAAO,CACxB,OAAAC,EAAU,KAAK,iBAAiB,SAAS,eAAgB,mCAAoC,CAC3F,EAAGT,EACH,EAAG,GACH,EAAG,KACH,EAAG,CACD,gDACA,oCACD,CACP,CAAK,EACM,KAAK,iBAAiB,SAAS,eAAe,aAAa,CAChE,MAAAQ,CACN,EAAO,CACD,QAASE,CACf,CAAK,CACF,CAID,MAAM,OAAQ,CACZC,EAAI,MAAM,2BAA4BC,EAAM,MAAM,CAChD,GAAI,KAAK,YACT,SAAU,KAAK,YACrB,CAAK,EAAG,CACF,EAAGZ,EACH,EAAG,GACH,EAAG,KACH,EAAG,CAACa,EAAGC,IAAMD,EAAE,GAAGC,CAAC,CACzB,CAAK,EACD,KAAK,KAAO,IAAIC,EAAQ,CACtB,QAAUC,GAAQL,EAAI,MAAMK,EAAK,OAAQ,CACvC,EAAGhB,EACH,EAAG,GACH,EAAG,KACH,EAAG,CAACa,EAAGC,IAAMD,EAAE,GAAGC,CAAC,CAC3B,CAAO,CACP,CAAK,EACDL,EAAU,KAAK,iBAAiB,SAAS,eAAgB,mCAAoC,CAC3F,EAAGT,EACH,EAAG,GACH,EAAG,KACH,EAAG,CACD,gDACA,oCACD,CACP,CAAK,EACD,MAAMiB,EAAsB,KAAK,iBAAiB,SAAS,eAAe,YAAY,OAAQ,CAC5F,QAASP,CACf,CAAK,EACDO,EAAoB,UAAWC,GAAkB,CAC/C,KAAK,sBAAsB,KAAKA,CAAa,CACnD,CAAK,EACD,KAAK,KAAK,UAAU,IAAMD,EAAoB,MAAO,CAAA,EACrDN,EAAI,MAAM,2BAA4BC,EAAM,IAAI,CAC9C,GAAI,KAAK,WACf,CAAK,EAAG,CACF,EAAGZ,EACH,EAAG,GACH,EAAG,KACH,EAAG,CAACa,EAAGC,IAAMD,EAAE,GAAGC,CAAC,CACzB,CAAK,CACF,CAID,MAAM,QAAS,CACb,MAAM,KAAK,MAAM,SAClB,CACH","x_google_ignoreList":[0]}